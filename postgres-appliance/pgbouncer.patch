diff -urN pgbouncer-1.12.0.orig/src/client.c pgbouncer-1.12.0/src/client.c
--- pgbouncer-1.12.0.orig/src/client.c	2019-10-17 09:16:04.000000000 +0200
+++ pgbouncer-1.12.0/src/client.c	2019-11-11 16:39:36.972520077 +0100
@@ -246,6 +246,8 @@
 
 bool set_pool(PgSocket *client, const char *dbname, const char *username, const char *password, bool takeover)
 {
+	int auth;
+
 	Assert((password && takeover) || (!password && !takeover));
 
 	/* find database */
@@ -288,8 +290,14 @@
 		return false;
 	}
 
+	if (cf_auth_type == AUTH_HBA)
+		auth = hba_eval(parsed_hba, &client->remote_addr, !!client->sbuf.tls,
+						client->db->name, username);
+	else
+		auth = cf_auth_type;
+
 	/* find user */
-	if (cf_auth_type == AUTH_ANY) {
+	if (auth == AUTH_ANY) {
 		/* ignore requested user */
 		if (client->db->forced_user == NULL) {
 			slog_error(client, "auth_type=any requires forced user");
@@ -297,7 +305,7 @@
 			return false;
 		}
 		client->auth_user = client->db->forced_user;
-	} else if (cf_auth_type == AUTH_PAM) {
+	} else if (auth == AUTH_PAM) {
 		if (client->db->auth_user) {
 			slog_error(client, "PAM can't be used together with database authentication");
 			disconnect_client(client, true, "bouncer config error");
diff -urN pgbouncer-1.12.0.orig/src/hba.c pgbouncer-1.12.0/src/hba.c
--- pgbouncer-1.12.0.orig/src/hba.c	2019-09-23 16:32:52.000000000 +0200
+++ pgbouncer-1.12.0/src/hba.c	2019-11-11 16:39:09.076034253 +0100
@@ -588,6 +588,10 @@
 		rule->rule_method = AUTH_PEER;
 	} else if (eat_kw(tp, "cert")) {
 		rule->rule_method = AUTH_CERT;
+#ifdef HAVE_PAM
+	} else if (eat_kw(tp, "pam")) {
+		rule->rule_method = AUTH_PAM;
+#endif
 	} else if (eat_kw(tp, "scram-sha-256")) {
 		rule->rule_method = AUTH_SCRAM_SHA_256;
 	} else {
